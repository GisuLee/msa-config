구분	목차	소목차	제목	설명
			20 Page	
1			마이크로서비스 아키텍처(Microservice Architecture)	
	1.1		마이크로서비스 아키텍처	
			아키텍처란 무엇인가??	서비스가 아닌 마이크로서비스?마이크로서비스를 위한 아키텍처?서비스 중심의 아키텍처
		1.1.1	마이크로서비스 아키텍처의 정의	
			아키텍처스타일	"마이크로서비스 아키텍처의 정의?마이크로서비스 아키텍처의 구성요소와 요소간의 관계?제약사항을 가지는 아키텍처는 아키텍처 스타일서비스에 대한 제약과 시스템환경에 대한 제약사항
시스템전체 구조나 설계모형의 재사용"
		1.1.2	서비스 중심의 아키텍처	
			비즈니스 중심 아키텍처	비즈니스 변화 대응을 위한 서비스?서비스 지원을 위한 아키텍처?도메인의 특성과 조직의 특성을 반영한 아키텍처
	1.2		왜 마이크로서비스 아키텍처인가?	
			작고 빠르게(민첩한 서비스)?자동화와 시각화(유연한 인프라)	
		1.2.1	민첩한 서비스	
			"작고 명확한 서비스?MVP(Minimum Viable Product), happy path?
"	"서비스를 작고 명확하게 나눈다.?서비스의 최소기능 중심 개발하고 피드백 반영?작은 서비스들은 독립적이다.
서비스 단위로 연계하여 새로운 서비스를 만들어 낸다."
		1.2.2	유연한 인프라	
				"서비스의 개발이 단순하고 명확하게?서비스의 개발에서 배포, 운영까지 자동화?서비스의 확장이 자유롭고, 관리가 쉽게
스케일아웃, 자동화, 시각화"
	1.3		마이크로서비스 아키텍처 고려사항	
			소통과 협업의 문화?점진적 개발과 지속적 통합?자동화와 시각화	문화-방법론-인프라 의 결합?절차형 개발이 아니 점진적 개발, 지속적 통합?전체 개발 라이프사이클이 자동화 되고 시각화
		1.3.1	문화	
			이해관계들간의 소통과 협업?팀 구조의 변화(너무 작은 조직X)?점진적 확장(작게 시작, 성숙도 점진적)?품질과 속도	도메인 전문가, 정보기술전문가, 개발자, 운영자?Self-Organization?가능한 부분부터, 성숙도 측면에서의 낮은단계->높은단계?품질을 고려한 속도의 조절
		1.3.2	방법론	
			절차?방법?산출물(간소화, 툴 링 자동화)?도구(협업도구, 대시보드, 개발환경, 형상관리, 테스트환경)	절차 중심에서 -> 반복 프로세스 (반복의본질-소통)?Iteration 백로그 수행여부 점검, UI중심, 일정주기 별 검증 ?코드 중심 산출물 최소화?협업도구, 현황 대시보드, 개발환경, 형상관리 자동화
		1.3.3	기술	
			클라우드 네이티브 환경?자동화?시각화	클라우드 인프라 활용, 컨테이너 기반?지속적 통합 배포 환경의 자동화?라이프사이클의 시각화


구분	목차	소목차	제목	설명
			50 Pages	
2			클라우드 네이티브(Cloud Native)	
	2.1		클라우드 네이티브	"approach to designing, building and running applications based on infrastructure-as-a-service combined with new operational tools and services like continuous integration, container engines and orchestrators - cloud foundry
마이크로서비스 아키텍처를 위한 환경
클라우드 컴퓨팅+시스템+소프트웨어 설계
클라우드 컴퓨팅 모델의 장점 활용 애플리케이션을 개발하고 실행 접근방식
infrastructure>provisioning>runtime>orchestration/management>application/development
CNCF 재단 클라우드 네이티브 환경 확산?구글->가입->Cloud Native Computing Foundation?개별 oss project -> 시스템 화 스택 제공"
		2.1.1	클라우드 네이티브 어플리케이션	마이크로서비스
			12 Factors	"특성 ( 캡슐화, 느슨한 결합, 모듈식, 즉시배포, 장애복구, 스케일아웃)
어플리케이션이 작게 모듈화, 느슨한 결합, 조합"
			마이크로서비스	기술(분산병렬처리, 장애복구, 어플리케이션은 특정 물리적 리소스에서 분리되도록 설계)?Twelve-Factor App, Microservice, Container, Multitenancy, PaaS)
		2.1.2	클라우드 네이티브 아키텍처	클라우드에 최적화된 어플리케이션을 개발하고 운영할 수 있는 아키텍처를 제공
			Scaling	
			Resilience	서비스 생성-통합-배포, 시장 대응 시간이 단축?분산병렬처리, 탄력성, 스케일 아웃, 상태 비저장 방식, 오류예측하여 실행상태 유지를 위한 자동복원능력(Resilient)
		2.1.3	클라우드 네이티브 인프라	
			Container packaged	
			Dynamically managed	
		2.1.4	지속적 통합과 배포	비용절감, 타임투마켓, 리스크완화, 신뢰구축, 고객이해, 품질
			Containus Integration	CI Server, SCM, Build Tool, Test Tool
			Containus Delivery	"개발~배포 자동화, 어플리케이션 버져닝
딜리버리 파이프라인(자동화, 신뢰 프로세스), 릴리즈 자동화, 프로비저닝"
		2.1.5	데브옵스	
				"애플리케이션과 서비스의 개발에서 배포 운영까지 빠르게 제공하기 조직의 문화, 방법론의 조합?속도(팀단위 개발-배포), 협업(개발, 운영 워크플로워 결합), ?지속적통합배포, 자동화(코드형인프라-프로비져닝, 확장, 모니터링, 로깅)
복잡하고 큰 시스템->독립적인 작은 서비스들의 조합->어플리케이션 반영주기가 짧아지고 상태관리를 위한 모니터링 중요"
			팀의 구성(Self Orgainization)	Cross Functional -> Self Organization
			자동화 시각화	빌드 배포 프로세스 자동화 시각화
	2.2		컨테이너(Container Centric)	서비스단위 패키징, 경량, 빠른 배포, 관리, 확장성 제공
			컨테이너의 개념	
			프로세스 격리	
			가상화와 컨테이너	
		2.2.1	리눅스 컨테이너(LinuX Container)	
			Namepace	
			Cgroup	
		2.2.2	도커 컨테이너(Docker Container)	
			도커 이미지와 도커 컨테이너	
			도커 레지스트리와 레포지토리	
			도커를 이용한 마이크로서비스 패키징	
		2.2.3	컨테이너 오케스트레이션	
			컨테이너 오케스트레이션 	
			오케스트레이션 도구	


구분	목차	소목차	제목	설명
			60 Pages	
3			마이크로서비스 기획	가상의 업무기획 ->서비스식별->아키텍처설계->실행환경구성?(기존환경에서 -> 전환 이야기, scm, mes)
	3.1		마이크로서비스(Microservices) 이해	
		3.1.1	마이크로서비스	
			마이크로서비스	어플리케이션을 상호 독립적인 최소 규모로 구성을 분할하여 개발하는 소프트웨어 작성을 위한 접근방식
		3.1.2	마이크로서비스특성	
			서비스 자율성	느슨한 결합
			서비스 독립성	서비스독립적 배포 운영
			서비스 응집성	한가지 일에 집중
			조직 지향성	조직일 단위(팀) - 조직구조이해
			기술 수용성	폴리그랏아키텍처/프로그래밍
			기술 표준성	RESTful API
		3.1.3	마이크로서비스를 위한 고려사항	
			조직	Cross functional, Self Organization
			프로세스	자동화, 시각화
			기술(핵심개념위주)	DDD(도메인모델, 유비쿼터스언어,바운디드컨텍스트)?폴리그랏(프로그래밍, 퍼시스턴스), RESTful, stateless, CQRS, 이벤트소싱
	3.2		마이크로서비스 식별	
			서비스전환	B2C, B2B, 전통적인 산업(제조-배포이슈), 솔루션 분야에서 전환을 시도
			서비스경계	
		3.2.1	요구사항 정의(Requirement Definition)	
			품질요구사항 정의	
			요구사항 우선 순위화	
		3.2.2	도메인분석	제조(SCM, MES), 통신, 철도.... 란 무엇인가...
		3.2.3	업무현황분석	해당 도메인에서 사용하는 공통기능 및 용어의 이해 기능 분류 확인
		3.2.4	조직분석	사용자, 업무조직, 운영조직, 조직과 업무 연관성
		3.2.5	제한 영역(Bounded Context)	조직 단위 식별(사업부 영역 구분)
		3.2.6	조직과 서비스 상관관계 분석	조직 내 서비스 분석
		3.2.7	서비스와 데이타 간 상관관계 분석	서비스에서 데이타 이용
		3.2.8	서비스 간 연관성(Dependency) 식별	서비스 간 연관성 식별
		3.2.9	데이타 간 의존성 식별	데이타 간 복제, 참조 등
		3.2.10	서비스 단위 정의	서비스 단위 정의
		3.2.11	서비스 평가	서비스 독립성, 자율성, 기술방식, 조직구성, 관리 측면 고려


구분	목차	소목차	제목	설명
			70 Pages	
4			마이크로서비스 아키텍처 설계	요구사항정의 -> 아키텍처원칙 -> 품질속성도출 -> 품질속성시나리오 -> 스타일결정 -> 패턴
	4.1		아키텍처 원칙(Architecture Principle)	마이크로서비스 원칙 + 사용자 요구
		4.1.1	요구사항과 제약사항	도메인 요건, 프로젝트 제약사항, 사용자 요구사항 우선순위, 기술제약사항 등을 고려한다.
		4.1.2	마이크로서비스 아키텍처 원칙 정의	마이크로서비스를 구현에 적합한 원칙을 기준으로 정한다.
	4.2		"아키텍처 품질속성 시나리오
(Quality Attribute Scenario)"	아키텍처의 결정요인->기능, 품질, 제약사항(비즈니스, 기술, 조직)?전술 -> 상위수준의 아키텍처패턴을 결정하게 하는 기법(품질수준 조절)?아키텍처 수립 방법론(ADD)-> 기능,품질속성,제약 -> input -> 만족아키텍처?1)요구추출우선순위화 2)아키텍처드라이버 - 아키텍처설계방향패턴선택 3)tradeoff 4)인터페이스?view - 4+1view, viewtype->view를구조화(module, runtime, allocation)?style - sw제약을표현(module-decomposition/generalization/layered style 등)
		4.2.1	품질속성-마이크로서비스	
		4.2.2	품질속성 시나리오	
	4.3		아키텍처 스타일(Microservice Architecture Style)	아키텍처스타일 설명, 마이크로서비스아키텍처 스타일의 특징, 구성요소
		4.3.1	마이크로서비스 아키텍처 스타일	클라우드, 분산환경, 서비스 단위, 장애복구, 빠른 배포
			API Centric	
			Externalizing Configuration	
			Decomposing Service	
			Service Versionning	
			Event Driven Business Logic	
			Polyglot Persistence	
			Event Soucing	
			CQRS	
			Handling partial failure	
			Distributed tracing	
		4.3.2	마이크로서비스 아키텍처 구성요소	게이트웨이, 인증 및 권한, 어플리케이션, 데이타, 환경설정, 모니터링, 통합 및 배포, 관리?지속적 통합 및 배포(Continuous Integration&Delivery)?파이프라인 자동화(Pipeline Automation), 개발~배포 자동화, 어플리케이션 버져닝
			환경설정관리(Confifuration)	"프로파일 관리, 설정정보 갱신 (실행 중 변경)
계정, DB 커넥션, 세션, IP, 로깅, 실행 중 변경 /refresh "
			게이트웨이(API Gateway)	동적 라우팅(Dynamic Routing), LB, 서비스 등록 및 감지(Service Registration & Discovery)
			마이크로서비스(Microservice)	서비스 분할
			서비스 모니터링(Service Monitoring)	개별 서비스 모니터링, 통합 서비스 모니터링
			서비스 통합 및 배포(Continuous Integration & Delivery)	통합, 배포, 파이프라인
			테스트	보안, 단위, 컨트렉트 테스트
			인프라 관리(Infrastructure Management)	스케일아웃(Scale-out), 리소스 추가

구분	목차	소목차	제목	설명
			70 Pages	
5			마이크로서비스 아키텍처 구축(Microservice Architecture Implementation)	개발환경(Spring Cloud 기반)?실행환경(Non-Container, Container)
	5.1		개발 표준 정의	
		5.1.1	표준스펙 정의	소프트웨어, 개발언어, Library 버전, 개발 툴
		5.1.2	명명규칙 정의	프로그램 명명규칙, 디렉토리 명명규칙, 코딩가이드, 탬플릿
	5.2		마이크로서비스 아키텍처 개발환경 구성	
			넷플릭스 오픈소스(Netflix OSS)	Spring Config, Zuul, Ribbon, Eureka, Hystrix, Turbine
			개발환경구성	구성도 설명
		5.2.1	스프링 클라우드 환경설정(Spring Cloud Configuration)	
			프로파일 관리와 서비스	프로파일 별 서버 맵핑, 실행 중 설정변경반영
			환경설정 서비스 구성	Profile 별 설정관리 .yml?1. Github에 Repository에 xxxx.yml 설정파일 생성?2. Msa config server 생성?3. Msa service 새성?4. Application.yml 설정? port 및 github yml주소?5. @EnableConfigServer 등록
		5.2.2	줄(Zuul)/유레카(Eureka) 기반 게이트웨이서비스(Gateway Service) 환경구성	
			게이트웨이서비스의 동작방식	라우팅, 로드밸런서, 서비스등록 및 감지
			줄(Zuul) 라우팅 구성	1. Application.yml server port 및 ?config server 주소등록?Zuul context path?Zulu-(serviceId)-Ribbon: app서비스주소 등록?2. @EnableZuulProxy 실행
			리본(Ribbon) 로드 밸런서 구성	Zulu-(serviceId)-Ribbon: app#1,app#2등 서비스주소 등록
			유레카(Eureka) 를 이용한 서비스 등록 및 감지 환경 구성	1. @EnableEurekaServer?2. application.yml
		5.2.3	스프링부트(Springboot) 마이크로서비스 작성	
			마이크로서비스 생성	Eclipse 프로젝트 생성(샘플코드 경로 github)
			마이크로서비스 설정	1. Application.yml 설정? port 및 config server 주소  및 git 에 profile명?2. Application profile명 설정?3. Config bean 생성(MsaConfig)?4. RestController,@EnableConfigurationProperties(MsaConfig.class) 설정?5. Eureka Cient 설정?6. -Dspring.profiles.active=dev
			스웨그(Swegger) 설정	API 문서화
		5.2.4	히스트릭스(Histrix)/터빈(Turbine) 기반 서비스 모니터링(Monitoring) 환경구성	
			히스트릭스(Histrix)/터빈(Turbine) 동작방식	
			히스트릭스(Histrix) 구성	
			터빈(Turbine) 구성	
		5.2.5	통합 및 배포 서비스(Continuous Integration&Delivery Service) 환경구성	
			지속적 통합(Continuous Integration)	
			지속적 배포(Continuous Delivery)	
		5.2.6	인프라관리(Infrastructure Management Service)	
			수평확장(Scale-Out)	
			자원할당(Resource Allocation)	
	5.3		AWS EC2 기반 아키텍처 실행환경 구성	
		5.3.1	AWS EC2 기반 스프링 부트 환경 구성	Ubuntu
			스프링부트 실행 환경설정	Java JDK, 탄력적 IP, 인/아웃바운드 포트오픈
			스프링부트 배포 환경 구성	GitLab 과 연결
			스프링부트 jar 등록 및 실행	등록 및 결과 확인
		5.3.2	AWS EC2 기반 도커 컨테이너 환경 구성	
			컨테이너(Container) 환경설정	도커 설치(도커 홈페이지 참고)
			도커 이미지(Docker Image) 생성	GitLab 에 YAML 등록
			도커 이미지 등록 및 실행	컨테이너로 등록 및 결과 확인

구분	목차	소목차	제목	설명
			30 Pages	
6			마이크로서비스 개발	
			개발에서 배포까지	
		6.1.1	화면 개발	dummy page 하나 작성
			hello sample page	
		6.1.2	서비스 개발	
			springboot hello microservice	
7			마이크로서비스 테스트	
		7.1.1	스웨거(Swegger)	
			Swegger API점검	
		7.1.2	컨트렉트(Contract)	
			컨트렉트 테스트	
8			마치며	
			비즈니스와 아키텍처	
			아키텍트의 역할	

